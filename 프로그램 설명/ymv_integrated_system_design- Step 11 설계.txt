# YMV ERP 통합 시스템 설계 백업 - V11
## Generated: 2024-09-27 | 직원 관리 + 영업 프로세스 + 캐시 플로우 통합 설계

## 1. 시스템 개요

### 1.1 통합 시스템 구성
- **Step 11**: 직원 관리 시스템 (Employee Management)
- **Step 12**: 영업 프로세스 관리 시스템 (Sales Process Management)
- **Step 13**: 캐시 플로우 관리 시스템 (Cash Flow Management)
- **Step 14**: 통합 대시보드 및 보고서 시스템

### 1.2 비즈니스 프로세스 전체 흐름
```
직원 관리 → 견적서 작성 → 고객 승인 → 제품 발주 → 제품 입고 → 제품 검수 → 제품 출고 → 판매 완료 → 캐시 플로우 반영
```

## 2. Step 11: 직원 관리 시스템 설계

### 2.1 직원 관리 핵심 기능
- 직원 정보 CRUD (등록/조회/수정/삭제)
- 조직도 관리 (부서별, 직급별 구조)
- 권한 관리 (역할 기반 접근 제어 확장)
- 근태 관리 (출퇴근, 휴가, 연차)
- 급여 관리 (기본급, 수당, 공제)
- 성과 평가 (목표 설정, 평가 입력)
- 교육 이력 관리

### 2.2 데이터베이스 확장 설계

#### 2.2.1 기존 employees 테이블 확장
```sql
-- employees 테이블 추가 컬럼
ALTER TABLE employees ADD COLUMN hire_date DATE;
ALTER TABLE employees ADD COLUMN salary DECIMAL(12,2);
ALTER TABLE employees ADD COLUMN position_level INTEGER;
ALTER TABLE employees ADD COLUMN manager_id INTEGER;
ALTER TABLE employees ADD COLUMN employment_status VARCHAR(20) DEFAULT 'active';
ALTER TABLE employees ADD COLUMN work_type VARCHAR(20) DEFAULT 'full_time';
ALTER TABLE employees ADD COLUMN birth_date DATE;
ALTER TABLE employees ADD COLUMN address TEXT;
ALTER TABLE employees ADD COLUMN emergency_contact VARCHAR(100);
ALTER TABLE employees ADD COLUMN emergency_phone VARCHAR(20);
```

#### 2.2.2 신규 테이블들
```sql
-- departments 테이블 (부서 정보)
CREATE TABLE departments (
    id SERIAL PRIMARY KEY,
    dept_code VARCHAR(10) UNIQUE NOT NULL,
    dept_name VARCHAR(100) NOT NULL,
    dept_name_en VARCHAR(100),
    parent_dept_id INTEGER,
    manager_id INTEGER,
    budget DECIMAL(15,2),
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- positions 테이블 (직급 정보)
CREATE TABLE positions (
    id SERIAL PRIMARY KEY,
    position_code VARCHAR(10) UNIQUE NOT NULL,
    position_name VARCHAR(50) NOT NULL,
    position_name_en VARCHAR(50),
    level_order INTEGER,
    min_salary DECIMAL(12,2),
    max_salary DECIMAL(12,2),
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- employee_history 테이블 (인사 이력)
CREATE TABLE employee_history (
    id SERIAL PRIMARY KEY,
    employee_id INTEGER NOT NULL,
    change_type VARCHAR(20) NOT NULL, -- hire, promotion, transfer, resignation
    change_date DATE NOT NULL,
    old_department_id INTEGER,
    new_department_id INTEGER,
    old_position_id INTEGER,
    new_position_id INTEGER,
    old_salary DECIMAL(12,2),
    new_salary DECIMAL(12,2),
    reason TEXT,
    approved_by INTEGER,
    created_at TIMESTAMP DEFAULT NOW()
);

-- attendance 테이블 (근태 기록)
CREATE TABLE attendance (
    id SERIAL PRIMARY KEY,
    employee_id INTEGER NOT NULL,
    work_date DATE NOT NULL,
    check_in_time TIME,
    check_out_time TIME,
    work_hours DECIMAL(4,2),
    overtime_hours DECIMAL(4,2),
    attendance_type VARCHAR(20) DEFAULT 'normal', -- normal, overtime, holiday
    status VARCHAR(20) DEFAULT 'present', -- present, absent, late, early_leave
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- leave_requests 테이블 (휴가 신청)
CREATE TABLE leave_requests (
    id SERIAL PRIMARY KEY,
    employee_id INTEGER NOT NULL,
    leave_type VARCHAR(20) NOT NULL, -- annual, sick, personal, maternity
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    days_count DECIMAL(3,1),
    reason TEXT,
    status VARCHAR(20) DEFAULT 'pending', -- pending, approved, rejected
    approved_by INTEGER,
    approved_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- payroll 테이블 (급여)
CREATE TABLE payroll (
    id SERIAL PRIMARY KEY,
    employee_id INTEGER NOT NULL,
    pay_period_start DATE NOT NULL,
    pay_period_end DATE NOT NULL,
    base_salary DECIMAL(12,2),
    overtime_pay DECIMAL(12,2),
    allowances DECIMAL(12,2),
    deductions DECIMAL(12,2),
    gross_pay DECIMAL(12,2),
    tax DECIMAL(12,2),
    net_pay DECIMAL(12,2),
    status VARCHAR(20) DEFAULT 'draft', -- draft, approved, paid
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

### 2.3 컴포넌트 구조 (employee_management.py)
```python
def show_employee_management():
    # 탭 구성: 직원목록, 직원등록, 조직도, 근태관리, 급여관리

def render_employee_list():
    # 직원 목록 (필터링, 검색, 정렬)
    # 부서별, 직급별, 재직상태별 필터

def render_employee_form():
    # 직원 등록/수정 폼
    # 기본정보, 근무정보, 연락처 등

def render_organization_chart():
    # 조직도 시각화
    # 부서별 계층 구조, 직급 체계

def render_attendance_management():
    # 근태 관리
    # 출퇴근 기록, 휴가 신청/승인

def render_payroll_management():
    # 급여 관리 (관리자 전용)
    # 월별 급여 계산, 급여 명세서

def render_employee_statistics():
    # 직원 통계
    # 부서별 인원, 연령대별 분포, 근속년수 등
```

## 3. Step 12: 영업 프로세스 관리 시스템 설계

### 3.1 영업 프로세스 전체 흐름
```
견적서 작성 → 고객 승인 → 제품 발주(공급업체) → 제품 입고 → 제품 검수 → 제품 출고 → 판매 완료 → 매출 계상
```

### 3.2 데이터베이스 설계

#### 3.2.1 영업 프로세스 마스터 테이블
```sql
-- sales_process 테이블 (영업 프로세스 마스터)
CREATE TABLE sales_process (
    id SERIAL PRIMARY KEY,
    process_number VARCHAR(20) UNIQUE NOT NULL, -- SP-2024-0001
    quotation_id INTEGER NOT NULL,
    customer_id INTEGER NOT NULL,
    sales_rep_id INTEGER NOT NULL, -- 영업 담당자
    process_status VARCHAR(20) DEFAULT 'quotation', 
    -- quotation, approved, ordered, received, inspected, shipped, completed
    total_amount DECIMAL(15,2),
    currency VARCHAR(3) DEFAULT 'KRW',
    profit_margin DECIMAL(5,2), -- 수익률
    expected_delivery_date DATE,
    actual_delivery_date DATE,
    customer_po_number VARCHAR(50), -- 고객 발주번호
    payment_terms VARCHAR(100),
    delivery_terms VARCHAR(100),
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- purchase_orders_to_supplier 테이블 (공급업체 발주)
CREATE TABLE purchase_orders_to_supplier (
    id SERIAL PRIMARY KEY,
    po_number VARCHAR(20) UNIQUE NOT NULL, -- PO-2024-0001
    sales_process_id INTEGER NOT NULL,
    supplier_id INTEGER NOT NULL,
    order_date DATE NOT NULL,
    expected_arrival_date DATE,
    actual_arrival_date DATE,
    total_amount DECIMAL(15,2),
    currency VARCHAR(3) DEFAULT 'KRW',
    payment_terms VARCHAR(100),
    status VARCHAR(20) DEFAULT 'ordered', -- ordered, shipped, received, cancelled
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- purchase_order_items 테이블 (발주 품목)
CREATE TABLE purchase_order_items (
    id SERIAL PRIMARY KEY,
    po_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(12,2),
    total_price DECIMAL(12,2),
    received_quantity INTEGER DEFAULT 0,
    inspected_quantity INTEGER DEFAULT 0,
    approved_quantity INTEGER DEFAULT 0,
    rejected_quantity INTEGER DEFAULT 0,
    notes TEXT
);

-- inventory_receiving 테이블 (제품 입고)
CREATE TABLE inventory_receiving (
    id SERIAL PRIMARY KEY,
    receiving_number VARCHAR(20) UNIQUE NOT NULL, -- RV-2024-0001
    po_id INTEGER NOT NULL,
    received_date DATE NOT NULL,
    received_by INTEGER NOT NULL, -- 입고 담당자
    total_quantity INTEGER,
    receiving_status VARCHAR(20) DEFAULT 'received', -- received, inspecting, completed
    warehouse_location VARCHAR(50),
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- quality_inspection 테이블 (제품 검수)
CREATE TABLE quality_inspection (
    id SERIAL PRIMARY KEY,
    inspection_number VARCHAR(20) UNIQUE NOT NULL, -- QI-2024-0001
    receiving_id INTEGER NOT NULL,
    inspector_id INTEGER NOT NULL, -- 검수자
    inspection_date DATE NOT NULL,
    inspection_method VARCHAR(100),
    total_quantity INTEGER,
    approved_quantity INTEGER,
    rejected_quantity INTEGER,
    defect_types TEXT, -- JSON 형태로 불량 유형 저장
    inspection_result VARCHAR(20), -- passed, failed, partial
    corrective_action TEXT,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- delivery_shipment 테이블 (제품 출고)
CREATE TABLE delivery_shipment (
    id SERIAL PRIMARY KEY,
    shipment_number VARCHAR(20) UNIQUE NOT NULL, -- SH-2024-0001
    sales_process_id INTEGER NOT NULL,
    shipment_date DATE NOT NULL,
    shipped_by INTEGER NOT NULL, -- 출고 담당자
    delivery_address TEXT,
    delivery_contact VARCHAR(100),
    delivery_phone VARCHAR(20),
    delivery_method VARCHAR(50), -- 직배송, 택배, 화물
    tracking_number VARCHAR(100),
    shipment_status VARCHAR(20) DEFAULT 'preparing', 
    -- preparing, shipped, in_transit, delivered, confirmed
    total_quantity INTEGER,
    notes TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- delivery_items 테이블 (출고 품목)
CREATE TABLE delivery_items (
    id SERIAL PRIMARY KEY,
    shipment_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    unit_price DECIMAL(12,2),
    total_price DECIMAL(12,2),
    serial_numbers TEXT, -- 시리얼 번호들 (JSON)
    notes TEXT
);
```

### 3.3 컴포넌트 구조 (sales_process_management.py)
```python
def show_sales_process_management():
    # 탭 구성: 프로세스현황, 발주관리, 입고관리, 검수관리, 출고관리

def render_process_dashboard():
    # 전체 영업 프로세스 현황 대시보드
    # 단계별 진행률, 지연 프로젝트 알림

def render_quotation_to_order():
    # 견적서 → 영업 프로세스 전환
    # 고객 승인 후 프로세스 시작

def render_purchase_order_management():
    # 공급업체 발주 관리
    # 발주서 생성, 발송, 추적

def render_inventory_management():
    # 입고 관리
    # 입고 등록, 창고 위치 관리

def render_quality_control():
    # 검수 관리
    # 검수 기준, 불량품 처리

def render_delivery_management():
    # 출고 관리
    # 출고 계획, 배송 추적

def render_sales_completion():
    # 판매 완료 처리
    # 매출 계상, 수익 분석
```

## 4. Step 13: 캐시 플로우 관리 시스템 설계

### 4.1 캐시 플로우 핵심 기능
- 예상 수입/지출 관리
- 실제 거래 내역 추적
- 현금 흐름 예측 및 분석
- 미수금/미지급금 관리
- 재무 보고서 생성

### 4.2 데이터베이스 설계

#### 4.2.1 캐시 플로우 관련 테이블
```sql
-- cash_flow 테이블 (캐시 플로우 마스터)
CREATE TABLE cash_flow (
    id SERIAL PRIMARY KEY,
    transaction_number VARCHAR(20) UNIQUE NOT NULL, -- CF-2024-0001
    reference_type VARCHAR(20), -- sales_process, purchase_order, payroll, expense
    reference_id INTEGER,
    transaction_type VARCHAR(10) NOT NULL, -- income, expense
    category VARCHAR(50), -- sales, purchase, salary, rent, utilities
    description TEXT,
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'KRW',
    expected_date DATE,
    actual_date DATE,
    status VARCHAR(20) DEFAULT 'expected', -- expected, confirmed, completed, cancelled
    payment_method VARCHAR(20), -- cash, bank_transfer, card, check
    account_id INTEGER, -- 계좌 정보
    counterpart VARCHAR(100), -- 거래 상대방
    notes TEXT,
    created_by INTEGER,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- accounts 테이블 (계좌 관리)
CREATE TABLE accounts (
    id SERIAL PRIMARY KEY,
    account_number VARCHAR(50) UNIQUE NOT NULL,
    account_name VARCHAR(100) NOT NULL,
    bank_name VARCHAR(100),
    account_type VARCHAR(20), -- checking, savings, credit
    currency VARCHAR(3) DEFAULT 'KRW',
    balance DECIMAL(15,2) DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- receivables 테이블 (미수금)
CREATE TABLE receivables (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    sales_process_id INTEGER,
    invoice_number VARCHAR(20),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'KRW',
    due_date DATE,
    status VARCHAR(20) DEFAULT 'outstanding', -- outstanding, overdue, paid, written_off
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- payables 테이블 (미지급금)
CREATE TABLE payables (
    id SERIAL PRIMARY KEY,
    supplier_id INTEGER NOT NULL,
    purchase_order_id INTEGER,
    invoice_number VARCHAR(20),
    amount DECIMAL(15,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'KRW',
    due_date DATE,
    status VARCHAR(20) DEFAULT 'outstanding', -- outstanding, overdue, paid
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- budget 테이블 (예산 관리)
CREATE TABLE budget (
    id SERIAL PRIMARY KEY,
    budget_year INTEGER NOT NULL,
    budget_month INTEGER,
    department_id INTEGER,
    category VARCHAR(50),
    budgeted_amount DECIMAL(15,2),
    actual_amount DECIMAL(15,2) DEFAULT 0,
    variance DECIMAL(15,2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);
```

### 4.3 캐시 플로우 자동 연동 로직

#### 4.3.1 영업 프로세스 → 캐시 플로우 연동
```python
# 영업 프로세스 각 단계별 캐시 플로우 생성

def create_purchase_cash_flow(sales_process_id, po_amount, expected_payment_date):
    # 공급업체 발주 시 → 예상 지출 등록
    
def create_sales_cash_flow(sales_process_id, sales_amount, expected_collection_date):
    # 제품 출고 시 → 예상 수입 등록
    
def update_actual_cash_flow(cf_id, actual_date, actual_amount):
    # 실제 거래 발생 시 → 실제 날짜/금액 업데이트
```

### 4.4 컴포넌트 구조 (cash_flow_management.py)
```python
def show_cash_flow_management():
    # 탭 구성: 캐시플로우대시보드, 수입관리, 지출관리, 예측분석, 재무보고서

def render_cash_flow_dashboard():
    # 캐시 플로우 대시보드
    # 월별 수입/지출, 현금 잔고 추이

def render_income_management():
    # 수입 관리
    # 예상 수입, 실제 수입, 미수금 관리

def render_expense_management():
    # 지출 관리  
    # 예상 지출, 실제 지출, 미지급금 관리

def render_cash_flow_forecast():
    # 현금 흐름 예측
    # 향후 3개월, 6개월 현금 흐름 예측

def render_financial_reports():
    # 재무 보고서
    # 손익계산서, 현금흐름표, 예산 대비 실적

def render_receivables_management():
    # 미수금 관리
    # 고객별 미수금, 연체 관리

def render_payables_management():
    # 미지급금 관리
    # 공급업체별 미지급금, 지급 계획
```

## 5. 문서 관리 시스템 확장

### 5.1 추가 필요 문서들
- 직원 정보서 (Employee Information)
- 급여 명세서 (Payroll Statement)  
- 발주서 - 공급업체용 (Purchase Order to Supplier)
- 입고 확인서 (Receiving Report)
- 검수 보고서 (Quality Inspection Report)
- 출고 확인서 (Delivery Confirmation)
- 납품 확인서 (Delivery Receipt)
- 세금계산서 (Tax Invoice)
- 현금 흐름표 (Cash Flow Statement)

### 5.2 프린트 템플릿 전체 구조
```python
utils/print_templates.py
├── BasePrintTemplate (공통 레이아웃)
│
├── 인사 문서
│   ├── EmployeeInfoTemplate (직원 정보서)
│   ├── PayrollStatementTemplate (급여 명세서)
│   └── AttendanceReportTemplate (근태 보고서)
│
├── 영업 문서  
│   ├── QuotationTemplate (견적서)
│   ├── SalesOrderTemplate (수주 확인서)
│   ├── DeliveryConfirmationTemplate (출고 확인서)
│   ├── DeliveryReceiptTemplate (납품 확인서)
│   └── TaxInvoiceTemplate (세금계산서)
│
├── 구매 문서
│   ├── PurchaseOrderTemplate (발주서)
│   ├── ReceivingReportTemplate (입고 확인서)
│   └── QualityInspectionTemplate (검수 보고서)
│
└── 재무 문서
    ├── ExpenseRequestTemplate (지출요청서)
    ├── CashFlowStatementTemplate (현금흐름표)
    └── FinancialReportTemplate (재무 보고서)
```

## 6. 대시보드 통합 설계

### 6.1 메인 대시보드 구성
- 직원 현황 (총 인원, 부서별, 근태 현황)
- 영업 파이프라인 (단계별 프로젝트 수, 예상 매출)
- 캐시 플로우 (월별 수입/지출, 현금 잔고)
- 알림 센터 (지연 프로젝트, 승인 대기 건, 연체 건)

### 6.2 역할별 대시보드
- CEO: 전체 현황, 재무 지표, 주요 KPI
- 인사팀: 직원 관리, 근태, 급여
- 영업팀: 영업 파이프라인, 고객 관리
- 구매팀: 발주 현황, 입고 관리
- 재무팀: 캐시 플로우, 미수/미지급금

## 7. 개발 로드맵

### 7.1 Phase 1: 직원 관리 시스템 (Step 11)
**기간**: 1주
- employees 테이블 확장
- 부서/직급 마스터 테이블 생성
- employee_management.py 컴포넌트 개발
- 조직도 시각화
- 근태 관리 기능
- 급여 관리 기능 (기본)

### 7.2 Phase 2: 영업 프로세스 시스템 (Step 12)  
**기간**: 2주
- 영업 프로세스 관련 테이블 생성
- sales_process_management.py 컴포넌트 개발
- 견적서 → 영업 프로세스 전환 기능
- 공급업체 발주 시스템
- 입고/검수/출고 관리
- 영업 대시보드

### 7.3 Phase 3: 캐시 플로우 시스템 (Step 13)
**기간**: 1.5주  
- 캐시 플로우 관련 테이블 생성
- cash_flow_management.py 컴포넌트 개발
- 영업 프로세스와 캐시 플로우 자동 연동
- 수입/지출 예측 알고리즘
- 재무 보고서 생성
- 미수/미지급금 관리

### 7.4 Phase 4: 통합 및 최적화 (Step 14)
**기간**: 1주
- 전체 시스템 통합 테스트
- 통합 대시보드 구현
- 문서 관리 시스템 완성
- 성능 최적화
- 사용자 권한 세분화

## 8. 데이터베이스 관계도

### 8.1 핵심 테이블 관계
```
employees ← departments
employees ← positions  
employees ← employee_history
employees ← attendance
employees ← payroll

quotations → sales_process ← purchase_orders_to_supplier
sales_process ← delivery_shipment
purchase_orders_to_supplier ← inventory_receiving ← quality_inspection

sales_process → cash_flow
purchase_orders_to_supplier → cash_flow
payroll → cash_flow

customers ← receivables
suppliers ← payables
```

### 8.2 인덱스 최적화 전략
```sql
-- 성능 최적화를 위한 인덱스
CREATE INDEX idx_employees_department_id ON employees(department_id);
CREATE INDEX idx_sales_process_status ON sales_process(process_status);
CREATE INDEX idx_cash_flow_expected_date ON cash_flow(expected_date);
CREATE INDEX idx_attendance_employee_date ON attendance(employee_id, work_date);
```

## 9. 보안 및 권한 관리

### 9.1 역할 기반 접근 제어 (RBAC) 확장
```python
# utils/auth.py 확장
ROLE_PERMISSIONS = {
    'ceo': ['all'],
    'manager': ['employee_read', 'sales_all', 'finance_read'],
    'hr': ['employee_all', 'payroll_all', 'attendance_all'],
    'sales': ['sales_all', 'customer_all', 'quotation_all'],
    'finance': ['finance_all', 'cash_flow_all'],
    'employee': ['employee_read_own', 'attendance_own']
}
```

### 9.2 데이터 보안
- 급여 정보 암호화
- 개인정보 액세스 로그
- 민감 정보 마스킹
- 정기적 백업 및 복구 계획

## 10. 성능 최적화 전략

### 10.1 데이터베이스 최적화
- 적절한 인덱스 설계
- 파티셔닝 (대량 데이터 테이블)
- 쿼리 최적화
- 연결 풀링

### 10.2 애플리케이션 최적화
- Streamlit 캐싱 전략 (@st.cache_data)
- 지연 로딩 (Lazy Loading)
- 페이지네이션
- 비동기 처리 (백그라운드 작업)

## 11. 모니터링 및 알림 시스템

### 11.1 비즈니스 알림
- 지연 프로젝트 알림
- 승인 대기 건 알림  
- 연체 미수금 알림
- 예산 초과 알림
- 재고 부족 알림

### 11.2 시스템 모니터링
- 데이터베이스 성능 모니터링
- 애플리케이션 오류 추적
- 사용자 활동 로그
- 시스템 리소스 모니터링

## 12. 백업 및 재해 복구

### 12.1 데이터 백업 전략
- 일일 자동 백업
- 증분 백업
- 오프사이트 백업
- 백업 검증 프로세스

### 12.2 재해 복구 계획
- RTO (복구 시간 목표): 4시간
- RPO (복구 지점 목표): 1시간  
- 비상 연락망
- 복구 절차 문서화

## 13. 테스트 전략

### 13.1 단위 테스트
- 각 컴포넌트별 기능 테스트
- 데이터베이스 CRUD 테스트
- 계산 로직 검증

### 13.2 통합 테스트  
- 시스템 간 연동 테스트
- 워크플로우 테스트
- 성능 테스트

### 13.3 사용자 승인 테스트
- 실제 업무 시나리오 테스트
- 사용성 테스트
- 보안 테스트

## 14. 향후 확장 계획

### 14.1 단기 확장 (6개월)
- 모바일 앱 개발
- API 연동 (외부 시스템)
- 고급 분석 및 BI
- 워크플로우 자동화

### 14.2 장기 확장 (1년)
- AI/ML 기반 예측 분석
- 다국가 지원 (다통화, 다언어)
- 클라우드 마이그레이션
- 마이크로서비스 아키텍처

## 15. 성공 지표 (KPI)

### 15.1 시스템 성능 지표
- 응답 시간 < 2초
- 가용률 > 99.5%
- 데이터 정확성 > 99.9%

### 15.2 비즈니스 지표
- 프로세스 처리 시간 단축 50%
- 수작업 오류 90% 감소
- 의사결정 속도 향상 70%

---

**설계 완료일**: 2024-09-27
**설계 범위**: 직원 관리 + 영업 프로세스 + 캐시 플로우 통합 시스템
**예상 개발 기간**: 4-5주
**개발 우선순위**: Step 11 (직원 관리) → Step 12 (영업 프로세스) → Step 13 (캐시 플로우) → Step 14 (통합)
**핵심 성과**: 완전한 ERP 시스템 구축, 업무 프로세스 자동화, 실시간 재무 관리