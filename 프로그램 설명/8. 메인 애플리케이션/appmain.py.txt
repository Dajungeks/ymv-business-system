"""
Main Streamlit application for YMV Business Management System
"""

import streamlit as st
import os
import sys
from datetime import datetime

# Add project root to Python path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# Import modules
from app.modules.auth.login import (
    require_authentication, 
    show_user_info, 
    initialize_master_user,
    check_permission,
    get_user_display_name
)
from app.shared.translations import t, translation_manager, initialize_translations, initialize_business_translations
from app.shared.database import test_connection
from app.shared.utils import get_dashboard_stats

# Import page modules (we'll create these)
from app.modules.dashboard import show_dashboard
from app.modules.system.product_management import show_product_management
from app.modules.system.exchange_rate import show_exchange_rate_management
from app.modules.system.company_info import show_company_info_management
from app.modules.general_affairs.employee_management import show_employee_management
from app.modules.general_affairs.purchase_management import show_purchase_management
from app.modules.general_affairs.cash_flow import show_cash_flow_management
from app.modules.sales.customer_management import show_customer_management
from app.modules.sales.quotation_management import show_quotation_management

def configure_page():
    """Configure Streamlit page settings"""
    st.set_page_config(
        page_title="YMV Business Management System",
        page_icon="üè¢",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS
    st.markdown("""
    <style>
    /* Main container */
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    /* Sidebar */
    .css-1d391kg {
        padding-top: 1rem;
    }
    
    /* Headers */
    h1 {
        color: #2c3e50;
        font-size: 2rem;
        margin-bottom: 1rem;
    }
    
    h2 {
        color: #34495e;
        font-size: 1.5rem;
        margin-bottom: 0.8rem;
    }
    
    h3 {
        color: #34495e;
        font-size: 1.2rem;
        margin-bottom: 0.6rem;
    }
    
    /* Metrics */
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Tables */
    .dataframe {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
    }
    
    /* Buttons */
    .stButton > button {
        border-radius: 6px;
        border: 1px solid #ddd;
        transition: all 0.3s;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    
    /* Forms */
    .stForm {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        background: #f8f9fa;
    }
    
    /* Sidebar menu */
    .sidebar-menu {
        padding: 0.5rem 0;
    }
    
    .menu-item {
        padding: 0.5rem;
        margin: 0.2rem 0;
        border-radius: 6px;
        cursor: pointer;
    }
    
    .menu-item:hover {
        background-color: #f0f0f0;
    }
    
    .menu-item.active {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
    }
    
    /* Success/Error messages */
    .stSuccess {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }
    
    .stError {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }
    
    .stWarning {
        background-color: #fff3cd;
        border-color: #ffeaa7;
        color: #856404;
    }
    
    .stInfo {
        background-color: #d1ecf1;
        border-color: #bee5eb;
        color: #0c5460;
    }
    
    /* Hide Streamlit menu and footer */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    
    /* Custom spacing */
    .element-container {
        margin-bottom: 1rem;
    }
    
    /* Status badges */
    .status-badge {
        padding: 0.25rem 0.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 500;
        text-align: center;
        display: inline-block;
        min-width: 60px;
    }
    
    .status-active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }
    
    .status-inactive {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }
    
    .status-pending {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeaa7;
    }
    
    .status-completed {
        background-color: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }
    </style>
    """, unsafe_allow_html=True)

def show_sidebar_menu():
    """Show sidebar navigation menu"""
    with st.sidebar:
        # App title and user info
        st.title("üè¢ YMV BMS")
        
        # Language selector
        translation_manager.get_language_selector("main_language")
        
        # User info
        show_user_info()
        
        st.markdown("---")
        
        # Navigation menu
        st.markdown("### üìã " + t('menu'))
        
        # Dashboard
        if st.button("üìä " + t('dashboard'), use_container_width=True):
            st.session_state.current_page = 'dashboard'
            st.rerun()
        
        # System Management
        if check_permission('system', 'read'):
            st.markdown("**üîß " + t('system') + "**")
            
            if st.button("üì¶ " + t('product_management'), use_container_width=True):
                st.session_state.current_page = 'product_management'
                st.rerun()
            
            if st.button("üí± " + t('exchange_rate_management'), use_container_width=True):
                st.session_state.current_page = 'exchange_rate'
                st.rerun()
            
            if st.button("üè¢ " + t('company_info_management'), use_container_width=True):
                st.session_state.current_page = 'company_info'
                st.rerun()
        
        # General Affairs
        if check_permission('general_affairs', 'read'):
            st.markdown("**üë• " + t('general_affairs') + "**")
            
            if st.button("üë§ " + t('employee_management'), use_container_width=True):
                st.session_state.current_page = 'employee_management'
                st.rerun()
            
            if st.button("üõí " + t('purchase_management'), use_container_width=True):
                st.session_state.current_page = 'purchase_management'
                st.rerun()
            
            if st.button("üí∞ " + t('cash_flow_management'), use_container_width=True):
                st.session_state.current_page = 'cash_flow'
                st.rerun()
        
        # Sales Management
        if check_permission('sales', 'read'):
            st.markdown("**üíº " + t('sales') + "**")
            
            if st.button("üë• " + t('customer_management'), use_container_width=True):
                st.session_state.current_page = 'customer_management'
                st.rerun()
            
            if st.button("üìÑ " + t('quotation_management'), use_container_width=True):
                st.session_state.current_page = 'quotation_management'
                st.rerun()
        
        st.markdown("---")
        
        # Footer info
        st.markdown(
            "<div style='text-align: center; color: #666; font-size: 0.8rem;'>"
            f"YMV BMS v1.0<br>"
            f"{datetime.now().strftime('%Y-%m-%d %H:%M')}"
            "</div>",
            unsafe_allow_html=True
        )

def show_page_content():
    """Show main page content based on current page"""
    current_page = st.session_state.get('current_page', 'dashboard')
    
    try:
        if current_page == 'dashboard':
            show_dashboard()
        
        # System Management Pages
        elif current_page == 'product_management':
            show_product_management()
        elif current_page == 'exchange_rate':
            show_exchange_rate_management()
        elif current_page == 'company_info':
            show_company_info_management()
        
        # General Affairs Pages
        elif current_page == 'employee_management':
            show_employee_management()
        elif current_page == 'purchase_management':
            show_purchase_management()
        elif current_page == 'cash_flow':
            show_cash_flow_management()
        
        # Sales Management Pages
        elif current_page == 'customer_management':
            show_customer_management()
        elif current_page == 'quotation_management':
            show_quotation_management()
        
        else:
            st.error(f"Page '{current_page}' not found")
            st.session_state.current_page = 'dashboard'
            st.rerun()
            
    except Exception as e:
        st.error(f"Error loading page: {str(e)}")
        st.info("Please try refreshing the page or contact administrator if the problem persists.")

def initialize_app():
    """Initialize application"""
    try:
        # Test database connection
        if not test_connection():
            st.error("‚ùå Database connection failed. Please check your configuration.")
            st.stop()
        
        # Initialize Master user
        initialize_master_user()
        
        # Initialize translations
        initialize_translations()
        initialize_business_translations()
        
        # Initialize session state
        if 'current_page' not in st.session_state:
            st.session_state.current_page = 'dashboard'
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Application initialization failed: {str(e)}")
        return False

def main():
    """Main application entry point"""
    # Configure page
    configure_page()
    
    # Initialize application
    if not initialize_app():
        st.stop()
    
    # Require authentication
    require_authentication()
    
    # Show main interface
    col1, col2 = st.columns([1, 4])
    
    with col1:
        show_sidebar_menu()
    
    with col2:
        # Page header
        current_page = st.session_state.get('current_page', 'dashboard')
        
        # Page title mapping
        page_titles = {
            'dashboard': 'üìä ' + t('dashboard'),
            'product_management': 'üì¶ ' + t('product_management'),
            'exchange_rate': 'üí± ' + t('exchange_rate_management'),
            'company_info': 'üè¢ ' + t('company_info_management'),
            'employee_management': 'üë§ ' + t('employee_management'),
            'purchase_management': 'üõí ' + t('purchase_management'),
            'cash_flow': 'üí∞ ' + t('cash_flow_management'),
            'customer_management': 'üë• ' + t('customer_management'),
            'quotation_management': 'üìÑ ' + t('quotation_management')
        }
        
        page_title = page_titles.get(current_page, current_page.title())
        
        # Header with breadcrumb
        col_title, col_user = st.columns([3, 1])
        
        with col_title:
            st.title(page_title)
        
        with col_user:
            st.markdown(f"**üë§ {get_user_display_name()}**")
            st.caption(f"üïí {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        
        st.markdown("---")
        
        # Show page content
        show_page_content()

if __name__ == "__main__":
    main()


# Import placeholder modules (we'll implement these next)

# Dashboard module
def show_dashboard():
    """Dashboard page placeholder"""
    st.header("üìä " + t('dashboard'))
    
    try:
        # Get dashboard statistics
        user_id = st.session_state.get('user_id')
        stats = get_dashboard_stats(user_id)
        
        # Metrics row
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                label="üë• " + t('customer').title(),
                value=stats['total_customers'],
                delta=None
            )
        
        with col2:
            st.metric(
                label="üìÑ Active " + t('quotation').title() + "s",
                value=stats['active_quotations'],
                delta=None
            )
        
        with col3:
            st.metric(
                label="üì¶ Pending " + t('order').title() + "s", 
                value=stats['pending_orders'],
                delta=None
            )
        
        with col4:
            from app.shared.database import format_currency
            st.metric(
                label="üí∞ Monthly " + t('sale').title() + "s",
                value=format_currency(stats['monthly_sales'], 'USD'),
                delta=None
            )
        
        st.markdown("---")
        
        # Quick actions
        st.subheader("üöÄ Quick Actions")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚ûï New " + t('customer'), use_container_width=True):
                st.session_state.current_page = 'customer_management'
                st.rerun()
        
        with col2:
            if st.button("üìÑ New " + t('quotation'), use_container_width=True):
                st.session_state.current_page = 'quotation_management' 
                st.rerun()
        
        with col3:
            if st.button("üõí New " + t('purchase'), use_container_width=True):
                st.session_state.current_page = 'purchase_management'
                st.rerun()
        
        with col4:
            if st.button("üì¶ New " + t('product'), use_container_width=True):
                st.session_state.current_page = 'product_management'
                st.rerun()
        
        st.markdown("---")
        
        # Recent activity section
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìã Recent Activities")
            st.info("Recent activities will be displayed here")
        
        with col2:
            st.subheader("üìä Monthly Overview")
            
            # Simple chart placeholder
            import plotly.express as px
            import pandas as pd
            
            # Sample data for demonstration
            months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
            sales = [12000, 15000, 18000, 14000, 20000, 25000]
            
            df = pd.DataFrame({
                'Month': months,
                'Sales': sales
            })
            
            fig = px.line(df, x='Month', y='Sales', title='Monthly Sales Trend')
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
    
    except Exception as e:
        st.error(f"Error loading dashboard: {str(e)}")
        st.info("Please refresh the page or contact administrator.")

# Module placeholders - we'll implement these properly next
def show_product_management():
    st.header("üì¶ " + t('product_management'))
    st.info("Product management module will be implemented here")

def show_exchange_rate_management():
    st.header("üí± " + t('exchange_rate_management'))
    st.info("Exchange rate management module will be implemented here")

def show_company_info_management():
    st.header("üè¢ " + t('company_info_management'))
    st.info("Company info management module will be implemented here")

def show_employee_management():
    st.header("üë§ " + t('employee_management'))
    st.info("Employee management module will be implemented here")

def show_purchase_management():
    st.header("üõí " + t('purchase_management'))
    st.info("Purchase management module will be implemented here")

def show_cash_flow_management():
    st.header("üí∞ " + t('cash_flow_management'))
    st.info("Cash flow management module will be implemented here")

def show_customer_management():
    st.header("üë• " + t('customer_management'))
    st.info("Customer management module will be implemented here")

def show_quotation_management():
    st.header("üìÑ " + t('quotation_management'))
    st.info("Quotation management module will be implemented here")