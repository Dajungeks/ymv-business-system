-- YMV Business Management System Database Schema
-- Created: 2025-09-20

-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- ============================================================================
-- 1. USER MANAGEMENT TABLES
-- ============================================================================

-- Users table
CREATE TABLE users (
    user_id SERIAL PRIMARY KEY,
    user_uuid UUID DEFAULT uuid_generate_v4() UNIQUE,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    employee_id VARCHAR(20) UNIQUE,
    full_name VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(20),
    department VARCHAR(50),
    position VARCHAR(50),
    hire_date DATE,
    status VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'vacation', 'resigned')),
    last_login TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User permissions table
CREATE TABLE user_permissions (
    permission_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    module_name VARCHAR(50) NOT NULL CHECK (module_name IN ('general_affairs', 'system', 'sales', 'admin')),
    permission_type VARCHAR(20) NOT NULL CHECK (permission_type IN ('read', 'write', 'delete', 'admin')),
    granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    granted_by INTEGER REFERENCES users(user_id),
    UNIQUE(user_id, module_name, permission_type)
);

-- Employee leaves table
CREATE TABLE employee_leaves (
    leave_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id) ON DELETE CASCADE,
    leave_type VARCHAR(30) NOT NULL CHECK (leave_type IN ('annual', 'sick', 'maternity', 'paternity', 'personal', 'bereavement')),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    days_count INTEGER NOT NULL,
    reason TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'cancelled')),
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    approved_by INTEGER REFERENCES users(user_id),
    approved_at TIMESTAMP,
    CHECK (end_date >= start_date)
);

-- ============================================================================
-- 2. SYSTEM MANAGEMENT TABLES
-- ============================================================================

-- Product categories table (6-level hierarchy)
CREATE TABLE product_categories (
    category_id SERIAL PRIMARY KEY,
    category_code VARCHAR(20) UNIQUE NOT NULL,
    category_name_ko VARCHAR(100),
    category_name_en VARCHAR(100),
    category_name_vn VARCHAR(100),
    parent_id INTEGER REFERENCES product_categories(category_id),
    level INTEGER NOT NULL CHECK (level >= 1 AND level <= 6),
    sort_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Products master table
CREATE TABLE products (
    product_id SERIAL PRIMARY KEY,
    product_code VARCHAR(50) UNIQUE NOT NULL,
    product_name_ko VARCHAR(200),
    product_name_en VARCHAR(200),
    product_name_vn VARCHAR(200),
    category_id INTEGER REFERENCES product_categories(category_id),
    specification TEXT,
    unit VARCHAR(20) DEFAULT 'ea',
    cost_price DECIMAL(15,2) DEFAULT 0,
    selling_price_usd DECIMAL(15,2) DEFAULT 0,
    selling_price_vnd DECIMAL(15,2) DEFAULT 0,
    selling_price_krw DECIMAL(15,2) DEFAULT 0,
    lead_time_days INTEGER DEFAULT 0,
    minimum_order_qty DECIMAL(10,2) DEFAULT 1,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Exchange rates table
CREATE TABLE exchange_rates (
    rate_id SERIAL PRIMARY KEY,
    year INTEGER NOT NULL,
    currency_code VARCHAR(3) NOT NULL CHECK (currency_code IN ('VND', 'KRW', 'CNY', 'THB', 'JPY', 'EUR')),
    rate_to_usd DECIMAL(12,4) NOT NULL,
    effective_date DATE NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(year, currency_code)
);

-- Company information table
CREATE TABLE company_info (
    company_id SERIAL PRIMARY KEY,
    company_name_ko VARCHAR(200),
    company_name_en VARCHAR(200),
    company_name_vn VARCHAR(200),
    business_number VARCHAR(50),
    tax_number VARCHAR(50),
    address_ko TEXT,
    address_en TEXT,
    address_vn TEXT,
    phone VARCHAR(50),
    fax VARCHAR(50),
    email VARCHAR(100),
    website VARCHAR(100),
    logo_url VARCHAR(500),
    bank_name VARCHAR(100),
    bank_account VARCHAR(50),
    bank_swift VARCHAR(20),
    is_default BOOLEAN DEFAULT false,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- 3. GENERAL AFFAIRS TABLES
-- ============================================================================

-- Purchase categories table
CREATE TABLE purchase_categories (
    category_id SERIAL PRIMARY KEY,
    category_code VARCHAR(20) UNIQUE NOT NULL,
    category_name VARCHAR(50) NOT NULL,
    category_name_ko VARCHAR(50),
    category_name_en VARCHAR(50),
    category_name_vn VARCHAR(50),
    description TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Purchases table
CREATE TABLE purchases (
    purchase_id SERIAL PRIMARY KEY,
    purchase_number VARCHAR(50) UNIQUE NOT NULL,
    category_id INTEGER REFERENCES purchase_categories(category_id),
    supplier_name VARCHAR(200) NOT NULL,
    supplier_contact VARCHAR(100),
    supplier_phone VARCHAR(50),
    supplier_email VARCHAR(100),
    purchase_date DATE NOT NULL,
    delivery_date DATE,
    total_amount_usd DECIMAL(15,2) DEFAULT 0,
    total_amount_vnd DECIMAL(15,2) DEFAULT 0,
    currency VARCHAR(3) DEFAULT 'USD',
    exchange_rate DECIMAL(12,4),
    tax_rate DECIMAL(5,2) DEFAULT 0,
    discount_rate DECIMAL(5,2) DEFAULT 0,
    payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'partial', 'paid', 'overdue')),
    payment_due_date DATE,
    payment_method VARCHAR(50),
    description TEXT,
    notes TEXT,
    status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'confirmed', 'received', 'cancelled')),
    requested_by INTEGER REFERENCES users(user_id),
    approved_by INTEGER REFERENCES users(user_id),
    received_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Purchase details table
CREATE TABLE purchase_details (
    detail_id SERIAL PRIMARY KEY,
    purchase_id INTEGER REFERENCES purchases(purchase_id) ON DELETE CASCADE,
    item_name VARCHAR(200) NOT NULL,
    specification TEXT,
    quantity DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) DEFAULT 'ea',
    unit_price DECIMAL(15,2) NOT NULL,
    total_price DECIMAL(15,2) NOT NULL,
    sort_order INTEGER DEFAULT 0
);

-- Cash flows table
CREATE TABLE cash_flows (
    flow_id SERIAL PRIMARY KEY,
    transaction_date DATE NOT NULL,
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('income', 'expense')),
    category VARCHAR(50),
    subcategory VARCHAR(50),
    amount_usd DECIMAL(15,2) DEFAULT 0,
    amount_vnd DECIMAL(15,2) DEFAULT 0,
    amount_krw DECIMAL(15,2) DEFAULT 0,
    currency VARCHAR(3) NOT NULL,
    exchange_rate DECIMAL(12,4),
    description TEXT,
    reference_id INTEGER,
    reference_type VARCHAR(50),
    payment_method VARCHAR(50) CHECK (payment_method IN ('cash', 'bank_transfer', 'check', 'credit_card', 'other')),
    account_name VARCHAR(100),
    status VARCHAR(20) DEFAULT 'confirmed' CHECK (status IN ('pending', 'confirmed', 'cancelled')),
    receipt_number VARCHAR(50),
    notes TEXT,
    created_by INTEGER REFERENCES users(user_id),
    approved_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Monthly budgets table
CREATE TABLE monthly_budgets (
    budget_id SERIAL PRIMARY KEY,
    year INTEGER NOT NULL,
    month INTEGER NOT NULL CHECK (month >= 1 AND month <= 12),
    category VARCHAR(50) NOT NULL,
    planned_income_usd DECIMAL(15,2) DEFAULT 0,
    planned_expense_usd DECIMAL(15,2) DEFAULT 0,
    actual_income_usd DECIMAL(15,2) DEFAULT 0,
    actual_expense_usd DECIMAL(15,2) DEFAULT 0,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(year, month, category)
);

-- ============================================================================
-- 4. SALES MANAGEMENT TABLES
-- ============================================================================

-- Customers table
CREATE TABLE customers (
    customer_id SERIAL PRIMARY KEY,
    customer_code VARCHAR(50) UNIQUE,
    company_name VARCHAR(200) NOT NULL,
    contact_person VARCHAR(100),
    phone VARCHAR(50),
    mobile VARCHAR(50),
    email VARCHAR(100),
    fax VARCHAR(50),
    address TEXT,
    business_number VARCHAR(50),
    tax_number VARCHAR(50),
    credit_limit DECIMAL(15,2) DEFAULT 0,
    payment_terms INTEGER DEFAULT 30,
    customer_type VARCHAR(50) DEFAULT 'corporate' CHECK (customer_type IN ('corporate', 'individual')),
    industry VARCHAR(100),
    country VARCHAR(50),
    preferred_currency VARCHAR(3) DEFAULT 'USD',
    discount_rate DECIMAL(5,2) DEFAULT 0,
    is_active BOOLEAN DEFAULT true,
    notes TEXT,
    created_by INTEGER REFERENCES users(user_id),
    updated_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Quotations table
CREATE TABLE quotations (
    quotation_id SERIAL PRIMARY KEY,
    quotation_number VARCHAR(50) UNIQUE NOT NULL,
    customer_id INTEGER REFERENCES customers(customer_id),
    quotation_date DATE NOT NULL,
    valid_until DATE,
    inquiry_number VARCHAR(50),
    project_name VARCHAR(200),
    total_amount_usd DECIMAL(15,2) DEFAULT 0,
    total_amount_vnd DECIMAL(15,2) DEFAULT 0,
    total_amount_krw DECIMAL(15,2) DEFAULT 0,
    currency VARCHAR(3) DEFAULT 'USD',
    exchange_rate DECIMAL(12,4),
    discount_rate DECIMAL(5,2) DEFAULT 0,
    tax_rate DECIMAL(5,2) DEFAULT 0,
    payment_terms VARCHAR(200),
    delivery_terms VARCHAR(200),
    warranty_terms VARCHAR(200),
    notes TEXT,
    internal_notes TEXT,
    status VARCHAR(20) DEFAULT 'draft' CHECK (status IN ('draft', 'sent', 'revised', 'accepted', 'rejected', 'expired', 'cancelled')),
    revision_number INTEGER DEFAULT 0,
    parent_quotation_id INTEGER REFERENCES quotations(quotation_id),
    created_by INTEGER REFERENCES users(user_id),
    approved_by INTEGER REFERENCES users(user_id),
    sent_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Quotation details table
CREATE TABLE quotation_details (
    detail_id SERIAL PRIMARY KEY,
    quotation_id INTEGER REFERENCES quotations(quotation_id) ON DELETE CASCADE,
    product_id INTEGER REFERENCES products(product_id),
    product_code VARCHAR(50),
    product_name VARCHAR(200) NOT NULL,
    specification TEXT,
    quantity DECIMAL(10,2) NOT NULL,
    unit VARCHAR(20) DEFAULT 'ea',
    unit_price_usd DECIMAL(15,2) NOT NULL,
    unit_price_vnd DECIMAL(15,2),
    unit_price_krw DECIMAL(15,2),
    total_price_usd DECIMAL(15,2) NOT NULL,
    total_price_vnd DECIMAL(15,2),
    total_price_krw DECIMAL(15,2),
    lead_time_days INTEGER DEFAULT 0,
    notes TEXT,
    sort_order INTEGER DEFAULT 0
);

-- Orders table
CREATE TABLE orders (
    order_id SERIAL PRIMARY KEY,
    order_number VARCHAR(50) UNIQUE NOT NULL,
    quotation_id INTEGER REFERENCES quotations(quotation_id),
    customer_id INTEGER REFERENCES customers(customer_id),
    customer_po_number VARCHAR(50),
    order_date DATE NOT NULL,
    requested_delivery_date DATE,
    confirmed_delivery_date DATE,
    total_amount_usd DECIMAL(15,2) DEFAULT 0,
    total_amount_vnd DECIMAL(15,2) DEFAULT 0,
    currency VARCHAR(3) DEFAULT 'USD',
    exchange_rate DECIMAL(12,4),
    payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'partial', 'paid', 'overdue')),
    delivery_status VARCHAR(20) DEFAULT 'pending' CHECK (delivery_status IN ('pending', 'preparing', 'shipped', 'delivered', 'cancelled')),
    status VARCHAR(20) DEFAULT 'confirmed' CHECK (status IN ('confirmed', 'in_progress', 'completed', 'cancelled')),
    shipping_address TEXT,
    special_instructions TEXT,
    notes TEXT,
    created_by INTEGER REFERENCES users(user_id),
    approved_by INTEGER REFERENCES users(user_id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- 5. SYSTEM TABLES
-- ============================================================================

-- Translations table for multi-language support
CREATE TABLE translations (
    translation_id SERIAL PRIMARY KEY,
    translation_key VARCHAR(100) NOT NULL,
    language_code VARCHAR(5) NOT NULL CHECK (language_code IN ('ko', 'en', 'vn')),
    translation_value TEXT NOT NULL,
    module_name VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(translation_key, language_code)
);

-- System settings table
CREATE TABLE system_settings (
    setting_id SERIAL PRIMARY KEY,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    setting_type VARCHAR(20) DEFAULT 'string' CHECK (setting_type IN ('string', 'number', 'boolean', 'json')),
    description TEXT,
    is_system BOOLEAN DEFAULT false,
    updated_by INTEGER REFERENCES users(user_id),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Document sequences table for auto-numbering
CREATE TABLE document_sequences (
    sequence_id SERIAL PRIMARY KEY,
    document_type VARCHAR(10) NOT NULL,
    year INTEGER NOT NULL,
    month INTEGER NOT NULL,
    day INTEGER NOT NULL,
    last_number INTEGER DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(document_type, year, month, day)
);

-- Audit log table
CREATE TABLE audit_logs (
    log_id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(user_id),
    table_name VARCHAR(50) NOT NULL,
    record_id INTEGER,
    action VARCHAR(10) NOT NULL CHECK (action IN ('INSERT', 'UPDATE', 'DELETE')),
    old_values JSONB,
    new_values JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ============================================================================
-- 6. INDEXES FOR PERFORMANCE
-- ============================================================================

-- User management indexes
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_employee_id ON users(employee_id);
CREATE INDEX idx_users_status ON users(status);
CREATE INDEX idx_user_permissions_user_module ON user_permissions(user_id, module_name);

-- Product management indexes
CREATE INDEX idx_products_code ON products(product_code);
CREATE INDEX idx_products_category ON products(category_id);
CREATE INDEX idx_products_active ON products(is_active);
CREATE INDEX idx_product_categories_parent ON product_categories(parent_id);
CREATE INDEX idx_product_categories_level ON product_categories(level);

-- Sales management indexes
CREATE INDEX idx_customers_code ON customers(customer_code);
CREATE INDEX idx_customers_company ON customers(company_name);
CREATE INDEX idx_customers_active ON customers(is_active);
CREATE INDEX idx_quotations_number ON quotations(quotation_number);
CREATE INDEX idx_quotations_customer_date ON quotations(customer_id, quotation_date);
CREATE INDEX idx_quotations_status ON quotations(status);
CREATE INDEX idx_orders_number ON orders(order_number);
CREATE INDEX idx_orders_customer ON orders(customer_id);
CREATE INDEX idx_orders_date ON orders(order_date);

-- Financial management indexes
CREATE INDEX idx_purchases_number ON purchases(purchase_number);
CREATE INDEX idx_purchases_date ON purchases(purchase_date);
CREATE INDEX idx_purchases_status ON purchases(status);
CREATE INDEX idx_cash_flows_date_type ON cash_flows(transaction_date, transaction_type);
CREATE INDEX idx_cash_flows_category ON cash_flows(category);

-- System indexes
CREATE INDEX idx_translations_key_lang ON translations(translation_key, language_code);
CREATE INDEX idx_exchange_rates_year_currency ON exchange_rates(year, currency_code);
CREATE INDEX idx_audit_logs_user_table ON audit_logs(user_id, table_name);
CREATE INDEX idx_audit_logs_created_at ON audit_logs(created_at);

-- ============================================================================
-- 7. TRIGGERS FOR UPDATED_AT
-- ============================================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply triggers to relevant tables
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_product_categories_updated_at BEFORE UPDATE ON product_categories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_customers_updated_at BEFORE UPDATE ON customers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_quotations_updated_at BEFORE UPDATE ON quotations FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_purchases_updated_at BEFORE UPDATE ON purchases FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_cash_flows_updated_at BEFORE UPDATE ON cash_flows FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_company_info_updated_at BEFORE UPDATE ON company_info FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_exchange_rates_updated_at BEFORE UPDATE ON exchange_rates FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- 8. INITIAL DATA
-- ============================================================================

-- Insert default system settings
INSERT INTO system_settings (setting_key, setting_value, setting_type, description, is_system) VALUES
('app_name', 'YMV Business Management System', 'string', 'Application name', true),
('app_version', '1.0.0', 'string', 'Application version', true),
('default_currency', 'USD', 'string', 'Default currency', false),
('default_language', 'ko', 'string', 'Default language', false),
('items_per_page', '20', 'number', 'Default items per page', false),
('session_timeout', '24', 'number', 'Session timeout in hours', false),
('backup_enabled', 'true', 'boolean', 'Enable automatic backup', false);

-- Insert purchase categories
INSERT INTO purchase_categories (category_code, category_name, category_name_ko, category_name_en, category_name_vn) VALUES
('OFFICE', 'office', '사무용품', 'Office Supplies', 'Văn phòng phẩm'),
('FIELD', 'field', '현장용품', 'Field Equipment', 'Thiết bị hiện trường'),
('OTHER', 'other', '기타', 'Others', 'Khác');

-- Insert current year exchange rates (sample data)
INSERT INTO exchange_rates (year, currency_code, rate_to_usd, effective_date) VALUES
(2025, 'VND', 24500.0000, '2025-01-01'),
(2025, 'KRW', 1350.0000, '2025-01-01'),
(2025, 'CNY', 7.2500, '2025-01-01'),
(2025, 'THB', 36.0000, '2025-01-01'),
(2025, 'JPY', 150.0000, '2025-01-01'),
(2025, 'EUR', 0.9200, '2025-01-01');

-- Insert Master user (password: 1023 -> bcrypt hash)
-- Note: You'll need to generate the actual bcrypt hash for '1023'
INSERT INTO users (username, password_hash, employee_id, full_name, department, position, status) VALUES
('Master', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeijJOoOc3zxz/MQ.', 'MASTER', 'System Administrator', 'IT', 'Administrator', 'active');

-- Grant all permissions to Master user
INSERT INTO user_permissions (user_id, module_name, permission_type) VALUES
(1, 'admin', 'admin'),
(1, 'system', 'admin'),
(1, 'general_affairs', 'admin'),
(1, 'sales', 'admin');

-- Insert basic translations
INSERT INTO translations (translation_key, language_code, translation_value, module_name) VALUES
-- Common terms
('login', 'ko', '로그인', 'auth'),
('login', 'en', 'Login', 'auth'),
('login', 'vn', 'Đăng nhập', 'auth'),
('logout', 'ko', '로그아웃', 'auth'),
('logout', 'en', 'Logout', 'auth'),
('logout', 'vn', 'Đăng xuất', 'auth'),
('username', 'ko', '사용자명', 'auth'),
('username', 'en', 'Username', 'auth'),
('username', 'vn', 'Tên người dùng', 'auth'),
('password', 'ko', '비밀번호', 'auth'),
('password', 'en', 'Password', 'auth'),
('password', 'vn', 'Mật khẩu', 'auth'),
-- Menu items
('dashboard', 'ko', '대시보드', 'common'),
('dashboard', 'en', 'Dashboard', 'common'),
('dashboard', 'vn', 'Bảng điều khiển', 'common'),
('system', 'ko', '시스템 관리', 'system'),
('system', 'en', 'System Management', 'system'),
('system', 'vn', 'Quản lý hệ thống', 'system'),
('general_affairs', 'ko', '총무', 'general_affairs'),
('general_affairs', 'en', 'General Affairs', 'general_affairs'),
('general_affairs', 'vn', 'Tổng vụ', 'general_affairs'),
('sales', 'ko', '영업 관리', 'sales'),
('sales', 'en', 'Sales Management', 'sales'),
('sales', 'vn', 'Quản lý bán hàng', 'sales');

COMMIT;