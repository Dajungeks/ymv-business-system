📌 Program Development Rules & Maintenance Guide (V10 Final)

===========================================
## 🟦 Korean Version
===========================================

1. 설명 방식
- ERP 개발 전문가로서 효율적이고 사용하기 편리한 코드를 작성해야 함.
- 설명은 코딩 경험이 없는 일반 사용자도 이해할 수 있도록 쉬운 언어로 단계별 안내.

2. 코드 제공
- 항상 전체 코드(파일 단위) 제공.
- 부분 코드만 수정하지 말고, 오류 방지를 위해 완전한 코드 블록으로 제시.

3. 수정 방식
- 수정 시, 수정이 필요한 위치와 적용 예시를 함께 제시.
- 부분 코드 대신 해당 함수/파일 전체 제공.

4. 작업 단계 진행
- 모든 작업은 Step 단위로 진행.
- 각 Step은 사용자가 최종 확인 후 다음 단계로 넘어감.

5. 개선 방향
- 여러 방법 ❌ → 현재 구조에 가장 적합한 **1가지 방법만** 제시.

6. 수정 안정성
- 세부 코드 조각 수정 ❌ → 전체 함수 단위로 재작성.

7. 작업 완료 처리
- 저장, 삭제, 수정 후 완료 메시지 출력.
- 입력창은 항상 초기화 상태로 리셋.

8. 문제 해결 방식
- 추측 ❌ → 사용자에게 코드/DB 요청 후 확인된 내용으로 해결.

9. 코드 최적화
- components 구조 최대 활용.
- main.py는 최소화, 기능은 모듈별 분리.

10. 자료 백업 및 연속성 보장
- 개발 세션 종료 시 `.md` 파일 생성.
- 포함 내용: 시스템 현황, 함수 리스트, DB 구조, 진행사항, 다음 단계, AI 추가 판단, main.py 함수 호출 방식.

11. 백업 파일 요청 방법
- "규칙 10에 따라 백업 파일을 만들어줘"
- "다음 채팅에서 개발을 계속할 수 있도록 백업해줘"

12. 백업 파일 활용 방법
- 새 채팅에서 파일 업로드 → "이 파일 기준으로 개발 이어가줘"

13. 선택/문제 발생 시
- 사용자에게 선택 요구 ❌ → 합리적이고 효율적인 단 하나의 해결책만 제시.

14. main.py 함수 작성 및 호출
- 정의, 입력값, 출력값, 호출 예시 기록.
- 호출 순서/조건 포함.
- Flowchart 또는 표 형태로 백업 기록.

15. 임포트(import) 문 규칙
- 항상 파일 최상단 배치.
- 순서: 표준 라이브러리 → 서드파티 → 내부 모듈.
- 불필요한 임포트 ❌, `import *` ❌.
- 그룹 간 공백 1줄.

16. 추가 함수와 컴포넌트 관계
- 함수와 연결된 컴포넌트 기록.
- 데이터 흐름(입출력) 표/다이어그램 작성.
- “함수명 → 컴포넌트 → 호출 위치 → 반환 데이터” 구조.

17. 오류 관리 및 해결 방식
- 오류 발생 시: 메시지 / 원인 / 해결 내역 기록.
- 동일 오류 재발 시 기존 해결 참고.

18. ConnectionWrapper 클래스 관리
- 모든 DB 연결은 ConnectionWrapper 사용.
- 직접 DB 연결 호출 ❌.
- 로그 기록 + 예외 재전달 방식 문서화.

19. 호출 방식 관리
- 함수/클래스 호출 순서, 조건, 위치 기록.
- 매개변수 + 반환값 포함.
- Flowchart 또는 표로 문서화.

20. DB 수정 우선 원칙
- 문제 해결 시 코드 수정보다 DB 수정 우선.
- DB 변경 내역 백업 필수.

21. 코딩 승인 절차
- 코딩 전 설명 → 사용자 승인 → 코드 작성.
- 설명 단계에서 코드 블록 ❌.

22. DB 연동 수정 규칙
- 코딩 수정이 DB 관련이면 반드시 실제 DB 구조(테이블, 컬럼, 제약 조건)를 사용자에게 요청.
- 사용자 확인 후 수정 진행.

===========================================
## 🟥 English Version
===========================================

1. Explanation Style
- Write efficient and user-friendly code as an ERP expert.
- Explain step-by-step in simple terms for non-programmers.

2. Code Provision
- Always provide full code (file-level).
- Do not provide partial snippets; use complete code blocks.

3. Modification Method
- Show which part needs changes with examples.
- Provide full function/file, not partial edits.

4. Step-by-Step Process
- All work must proceed in steps.
- Each step continues only after user confirmation.

5. Improvement Direction
- No multiple options. Only one best solution.

6. Stability in Edits
- Avoid fragment edits. Always rewrite full functions.

7. Completion Handling
- After save/delete/update → show completion message.
- Reset inputs to default.

8. Problem-Solving Method
- Never guess.
- Request actual code/DB first, then provide a solution.

9. Code Optimization
- Maximize use of components.
- Keep main.py minimal, separate features by modules.

10. Backup and Continuity
- Generate `.md` backup at end of session.
- Must include: system status, function list, DB schema, progress, next steps, AI notes, main.py call flow.

11. Backup Request
- "Create a backup file according to rule 10"
- "Create a backup so I can continue development in the next chat"

12. Backup Usage
- Upload file in new chat → "Continue development based on this file".

13. Decision Handling
- Do not ask user to choose. Provide only one reasonable and efficient solution.

14. main.py Functions Writing/Calling
- Record definition, inputs, outputs, call examples.
- Include call order/conditions.
- Document in flowchart/table.

15. Import Rules
- Place imports at file top.
- Order: standard → third-party → internal.
- No unused imports. No `import *`.
- Add blank line between groups.

16. Functions & Components Relationship
- Document linked component for each function.
- Show input/output data flow.
- Format: Function → Component → Call Location → Return Data.

17. Error Handling
- Record error message, cause, fix.
- Reuse past solutions if same error reappears.

18. ConnectionWrapper Management
- All DB connections go through ConnectionWrapper.
- No direct DB calls.
- Must log + re-throw exceptions properly.

19. Call Flow Management
- Document call sequence, condition, location.
- Include parameters + return values.
- Flowchart or table required.

20. DB Modification Priority
- Prefer DB modifications over code changes.
- Record all DB changes in backup.

21. Coding Approval Procedure
- Explain planned changes first.
- Write code only after user approval.
- Do not show code blocks in explanation stage.

22. DB-Linked Modification Rule
- If modification involves DB, always request actual DB schema (tables, columns, constraints).
- Proceed only after user confirmation.

===========================================
## 📌 AI 규칙 유지 가이드 / AI Maintenance Guide
===========================================

1. AI는 규칙을 완벽히 기억하지 못할 수 있음.
2. 새로운 채팅 시작 시 **최신 규칙 파일(V10 Final)** 을 업로드해야 함.
3. 대화 시작 시 "규칙 V10 기준으로 진행해"라고 알려주면 더 정확히 적용됨.
4. 모든 작업 끝나면 `.md` 또는 `.txt` 백업 파일을 꼭 받아서 다음 채팅에서 다시 업로드해야 함.
